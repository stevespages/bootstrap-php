<?php

// This file is in a directory called 'functions/'. It is being tracked with git and pushed to GitHub



/*
 * MODELS
 */
 
 
function deleteRow($table_name, $id, $pdo)
{
    $sql = "DELETE FROM $table_name WHERE id = ?";
    $statement = $pdo->prepare($sql);
    $statement->execute([$id]);
    return $statement;
}	

function getAll($table_name, $pdo, $ordered_by='id', $asc_or_desc='ASC')
{
    $sql = "SELECT * FROM $table_name ORDER BY $ordered_by $asc_or_desc";
    $statement = $pdo->query($sql);
    return $statement;
}


function getRowToEdit($table_name, $id, $pdo)
{
    $sql = "SELECT * FROM $table_name WHERE id = ?";
    $statement = $pdo->prepare($sql);
    $statement->execute([$id]);
    return $statement;
}


// it is not obvious how to bind parameters when they are in array variables of varying length
function save($table_name, $form_array, $pdo)
{
    $fields = "";
    $placeholders = "";
    $values = array();
    foreach($form_array as $key => $array) {
        $fields .= $key.", ";
        $placeholders .= "?, ";
        $values[] = $array['value'];
    }
    //get rid of the trailing comma and space
    $fields = substr($fields, 0, -2);
    $placeholders = substr($placeholders, 0, -2);
    $sql = "INSERT INTO $table_name ($fields) VALUES ($placeholders)";
    $statement = $pdo->prepare($sql);
    $statement->execute($values);
    return $values;
}


// should now be using prepared statements properly
function updateRow($table_name, $form_array, $id, $pdo)
{
    $sql = "UPDATE $table_name SET ";
    $values = array();
    foreach($form_array as $key => $array) {
    	
    	  //if($form_array[$key]['type'] == 'file') {
        //break;
        //}
    	
        $sql .= $key."=?, ";
        $values[] = $array['value'];
    }
    // get rid of the trailing space and comma
    $sql = substr($sql, 0, -2);
    $sql .= " WHERE id=?";
    $values[] = $id;
    $statement = $pdo->prepare($sql);
    $statement->execute($values);
    return $statement;
}



/*
 * VIEWS
 */


 // Creates HTML for site navigation
function createNavigation($navigation_links)
{
	$navigation = '<p class="nav-menu">| ';
	foreach($navigation_links as $key => $value) {
	    $navigation .= '<a href="'.$value.'">'.$key.'</a> | ';
	}
	$navigation .= '</p>';
	return $navigation;
}

// Creates HTML for site navigation: hamburger drop down
function createNavigationHamburger($navigation_links) {

$navigation = '
	<!--    Made by Erik Terwan    -->
	<!--   24th of November 2015   -->
	<!--    All rights reserved    -->
	<nav role="navigation">
  <div id="menuToggle">
    <!--
    A fake / hidden checkbox is used as click reciever,
    so you can use the :checked selector on it.
    -->
    <input type="checkbox" />
    
    <!--
    Some spans to act as a hamburger.
    
    They are acting like a real hamburger,
    not that McDonalds stuff.
    -->
    <span></span>
    <span></span>
    <span></span>
    
    <!--
    Too bad the menu has to be inside of the button
    but hey, it\'s pure CSS magic.
    -->
    <ul id="menu">';
    
	foreach($navigation_links as $key => $value) {
	    $navigation .= '<a href="'.$value.'"><li>'.$key.'</li></a>';
	}    
    
$navigation .= '
    </ul>
  	 </div>
	 </nav>';
	 
	 return $navigation;
}

// might be good to add page=.$page so edit and delete requests go to the...
// ... correct page.
function createTable($statement, $page, $editable=null, $display_id)
{
	$table = "<div><table border=1>";
	while($row = $statement->fetchObject())
	{
		$table .= "<tr>";
		foreach($row as $key => $value)
		{
			if($key != 'id' || $display_id === true) {
			if(strpos($key, 'image_') !== false) {
				$table .= "<td><img src=images/".$value." alt='no picture available' height='42' width='42'></td>";
		   } else {
			$table .= "<td>".$value."</td>";
		}
		}
		}
		if($editable) {
			$table .= "<td><a href='admin.php?page=".$page."&action=edit&id=".$row->id."'>Edit?</a></td>";
			$table .= "<td><a href='admin.php?page=".$page."&action=delete&id=".$row->id."'>Delete?</a></td>";
		}
		$table .= "</tr>";
	}
	$table .= "</table></div>";
	return $table;
}


// conditionally add something like: <input type="hidden" name="MAX_FILE_SIZE" value="30000" /> 
function showForm($action, $form_array, $enctype=false, $cancel_page)// new argument
{
    $form = "<form method='post' action=".$action;
    if($enctype === true) { // new if statement
        $form .= " enctype='multipart/form-data'";
    }
    $form .= ">";
    foreach($form_array as $key => $value) {
    	

      if($form_array[$key]['type'] == 'file' && ($form_array[$key]['value']!=''
       || $form_array[$key]['value']!=null)) {
      	break;
      }	

    	
    	$form .= "<p><label>".$form_array[$key]['form_label'];
    	if($form_array[$key]['type']=='select') {
    		$form .= " <select name='".$form_array[$key]['name']."'>";
         foreach($form_array[$key]['options'] as $key_2 => $value_2) {
         	$form .= '<option value="'.$key_2.'"';
            if($key_2 == $form_array[$key]['value']) {
            	$form .= ' selected';
            }
            $form .= '>'.$value_2.'</options>';
         }
         $form .= "</select";
         } else {
         	$form .= ' <input name="'.$form_array[$key]["name"]
            .'" type="'.$form_array[$key]["type"]
            .'" value="'.$form_array[$key]["value"]
            .'"';
            if($form_array[$key]['required']=='required') {
            $form .=" required";
            }				
        }
        $form .=	"></label> ".$form_array[$key]['error_mssg']."</p>";
    }
    
    
    
    
    
    $form .= "<input type='submit'> <a href='".$cancel_page."'> Cancel </a></form></br>";
    return $form;
}



/*
 * CONTROLLERS
 */
 
 // this should be renamed to assignFileUploadToFormArray as it will assign...
 // ...$_FILE['image_1']['name'] to $form_array['image_1']['value'] and also...
 // ...$_FILE['image_1']['error'] to $form_array['image_1]['error_mssg']
function assignFileUploadToFormArray($form_array)
{
    foreach($form_array as $key => $array) {
        if($form_array[$key]['type'] == 'file') {
        	
            if($_FILES[$key]['name'] != "" || $form_array[$key]['required'] == 'required') {
      
                $form_array[$key]['value'] = $_FILES[$key]['name'];
                if($_FILES[$key]['error'] != 0) {
		              $form_array[$key]['error_mssg'] = $_FILES[$key]['error'];
                }
              
            }
            
        }
    }
    return $form_array;
}


// This function implements a form of whitelisting of user entered $_POST...
// ...data. Obviously, the user entered values can not be anticipated but...
// ...the names of the keys of $_POST elements are only accessed if they...
// ...are in the $form_array. There is no mechanism to change the values...
// ... of name elements in the $form_array except by hardcoding them. 
function assignPostToFormArray($form_array)
{
	foreach($form_array as $key => $array)
	{
		if($form_array[$key]['type'] != 'file') {
		    $form_array[$key]['value'] = htmlentities($_POST[$form_array[$key]['name']]);
		}
	}
	return $form_array;
}

/* NOT REQUIRED?
// creates a path from a navigation name usable in a URL
// Uses createSlug()
// Used in createLinks()
function createLink($navigation_name, $front_controller)
{
	$slug = createSlug($navigation_name);
	$link = $front_controller.'?page='.$slug;
	return $link;
}
*/

// Creates an array of navigation names as keys with paths usable in URLs...
// ...as values
function createLinks($navigation_names, $front_controller)
{
    $navigation_links = array();
    foreach($navigation_names as $value) {
    	  $query_value = str_replace(" ", "-", strtolower($value));
        $navigation_links[$value] = $front_controller.'?page='.$query_value;
    }
    return $navigation_links;
}


/* NOT REQUIRED?
// Creates a slug from a navigation name
// Used in createLink()
function createSlug($navigation_name)
{
	$slug = strtolower($navigation_name);
	$slug = str_replace(" ", "-", $slug);
	return $slug;
}
*/


// This function returns the name of the controller file.
// $navigation_names array is declared and assigned in MODELS
// Set value of $controller from URL query string which come from href values
// First check that there was a query string in the URL
// controller is used to select the appropriate controller.php file.
// controller is used to append to the HTML title element.
// controller is used page subheading (optionally).
function getControllerName($navigation_names) 
{
if(isset( $_GET['page'])) {
    // now whitelist $_GET['page'] to prevent spurious user input
    if (in_array(ucwords(str_replace("-", " ", $_GET['page'])), $navigation_names)) {
        $controller = $_GET['page'];
        return $controller;
    } else {
    	  // if $_GET['page'] not in whitelist
	     $controller = 'home';
	     return $controller;
    }
} else {
	// if there was no query sting ie. isset($_GET['page']) returns false
	$controller = 'home';
	return $controller;
}
}


function isFormValid($form_array)
{
	$is_form_valid = true;
	foreach($form_array as $key => $array)
	{
		if($form_array[$key]['error_mssg'] != "")
		{
			$is_form_valid = false;
		}
	}
	return $is_form_valid;
}

// this function probably does not work: I think it does!
// it should return true or the error message
function moveFiles($form_array, $upload_dir)
{
    foreach($form_array as $key => $array) {
        if($form_array[$key]['type'] == 'file') {
        	
            if($form_array[$key]['value'] != "") {
        	
        	
            $upload_file = $upload_dir . basename(htmlentities($_FILES[$key]['name']));
	         $move = move_uploaded_file($_FILES[$key]['tmp_name'], $upload_file);
	         if($move != true) {
	         	$form_array[$key]['error_mssg'] = 'There is a problem with this file';
	         }
	         
	         
	         }
	         
	     }
    }
    return $form_array;
}


// $db and $table_name arguments are only required if using a validation test which requires access to the database.
// A test needs to recognise 
function validateFormArray($form_array, $db=null, $table_name=null)
{
	
	foreach($form_array as $key => $array)
	{
		// from Symfony documentation web site
		if($form_array[$key]['validate']=='not_blank')
		{
			if(false === $form_array[$key]['value'] || (empty($form_array[$key]['value']) && '0' != $form_array[$key]['value']))
			{
				$form_array[$key]['error_mssg'] .= 'This field can not be empty';
			}
		}
		if($form_array[$key]['validate']=='FILTER_VALIDATE_EMAIL')
		{
			if (!filter_var($form_array[$key]['value'], FILTER_VALIDATE_EMAIL))
			{
    			$form_array[$key]['error_mssg'] .= "Please enter a valid email address";
			}	
		}
		if($form_array[$key]['validate']=='unique' AND !isset($_GET['id']))
		{
			$column  = $form_array[$key]['name'];
			$sql = ("SELECT * FROM $table_name WHERE $column = ?");
			$stmt = $db->prepare($sql);
			$stmt->execute([$form_array[$key]['value']]);
			$row = $stmt->fetchObject();
			if($row !=  null)
			{
				$form_array[$key]['error_mssg'] .= 'That is already in the database. Please use another value';
			}
		}
	}
	return $form_array;
}
